---
import context from 'src/context';

const ctx = context.get();
const { config, domain } = ctx;
---

<script is:inline define:vars={{ ctx }}>
  window.docs_page = { ...ctx };
</script>

<script>
  const copy = document.querySelectorAll('[data-copy]');

  for (const button of copy) {
    button.addEventListener('click', () => {
      button.innerHTML = 'Copied';
      navigator.clipboard.writeText(button.getAttribute('data-copy-value') || '');

      setTimeout(() => {
        button.innerHTML = 'Copy';
      }, 1500);
    });
  }
</script>

<script>
  import type { Context } from 'src/context';
  const { owner, repository, domain } = (window as any).docs_page as Context;

  const tabs = document.querySelectorAll('div[data-tab-group]');

  const getButtons = (el: Element) => el.querySelectorAll('button[data-tab-group-button]');
  const getPanes = (el: Element) => el.querySelectorAll('div[data-tab-group-pane]');

  const setButtonState = (button: Element, id: string) => {
    const active = (button.getAttribute('data-tab-group-button-id') === id).toString();
    button.setAttribute('aria-selected', active);
  };

  const setPaneState = (pane: Element, id: string) => {
    if (pane.getAttribute('data-tab-group-pane-id') === id) {
      pane.classList.remove('hidden');
    } else {
      pane.classList.add('hidden');
    }
  };

  for (const tab of tabs) {
    const groupId = tab.getAttribute('data-tab-group-id');
    const groups = groupId ? document.querySelectorAll(`div[data-tab-group-id="${groupId}"]`) : [];

    const buttons = getButtons(tab);
    const panes = getPanes(tab);

    for (const button of buttons) {
      const buttonId = button.getAttribute('data-tab-group-button-id')!;

      button.addEventListener('click', () => {
        if (groupId) {
          fetch('/api/tabs-sync', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ owner, repository, domain, groupId, buttonId }),
          });
        }

        for (const button of buttons) setButtonState(button, buttonId);
        for (const pane of panes) setPaneState(pane, buttonId);

        for (const group of groups) {
          const buttons = getButtons(group);
          const panes = getPanes(group);

          for (const button of buttons) setButtonState(button, buttonId);
          for (const pane of panes) setPaneState(pane, buttonId);
        }
      });
    }
  }
</script>
{
  config.googleAnalytics && (
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${config.googleAnalytics}`} />
  )
}
{
  config.googleAnalytics && (
    <script
      slot="head"
      type="text/javascript"
      data-value={config.googleAnalytics}
      set:html={`
      window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments)}
      gtag('js', new Date()); gtag('config', document.currentScript.getAttribute('data-value'));
      `}
    />
  )
}
{
  config.googleTagManager && (
    <script
      slot="head"
      type="text/javascript"
      data-value={config.googleTagManager}
      set:html={`
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer',document.currentScript.getAttribute('data-value'));
      `}
    />
  )
}
{
  config.plausibleAnalytics && domain && (
    <script slot="head" defer data-domain={domain} src="https://plausible.io/js/plausible.js" />
  )
}
