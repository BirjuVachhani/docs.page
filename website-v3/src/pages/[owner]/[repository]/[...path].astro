---
import Root from '@layouts/Root.astro';
import { getBundle } from 'src/bundle';
import context from 'src/context';
import type { GetBundleResponse } from 'src/bundle';
import { isExternalLink, replaceMoustacheVariables, getImagePath } from 'src/utils';
import domains from '../../../../../domains.json';
import Theme from '@components/Theme.astro';

let { owner, repository } = Astro.params;
let ref: string | undefined;

if (!owner || !repository) {
  return Astro.redirect('/404');
}

// Check if the repo includes a ref (invertase/foo~bar)
if (repository.includes('~')) {
  [repository, ref] = repository.split('~');
}

let status: GetBundleResponse['status'];
let bundle: GetBundleResponse['bundle'];

try {
  let { status, bundle } = await getBundle({
    owner,
    repository,
    ref,
    path: Astro.params.slug!,
  });
} catch (e) {
  console.error(e);
}

// Set the status code for the request
Astro.response.status = status!;

if ('statusCode' in bundle!) {
  // TODO handle 404
  return Astro.redirect('/404');
}

// Handle a frontmatter redirect
const redirect = bundle!.frontmatter.redirect;
if (redirect && isExternalLink(redirect)) {
  return Astro.redirect(redirect);
} else if (redirect) {
  return Astro.redirect(`/${owner}/${repository}${redirect}`);
}

// Set the theme color
const config = bundle!.config;
const domain = domains.find(([, repository]) => repository === `${owner}/${repository}`)?.at(0);

// Set the context store.
context.set({
  owner,
  repository,
  config,
  frontmatter: bundle!.frontmatter,
  code: replaceMoustacheVariables(config.variables ?? {}, bundle!.code),
  headings: bundle!.headings,
  domain,
  baseBranch: bundle!.baseBranch,
  source: bundle!.source,
});

// TODO: Handle status codes
---

<Root>
  <link
    slot="head"
    rel="shortcut icon"
    href={getImagePath(config.favicon || 'https://docs.page/favicon.ico?v=2')}
  />
  {
    config.googleAnalytics && (
      <script
        slot="head"
        async
        src={`https://www.googletagmanager.com/gtag/js?id=${config.googleAnalytics}`}
      />
    )
  }
  {
    config.googleAnalytics && (
      <script
        slot="head"
        type="text/javascript"
        data-value={config.googleAnalytics}
        set:html={`
        window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments)}
        gtag('js', new Date()); gtag('config', document.currentScript.getAttribute('data-value'));
        `}
      />
    )
  }
  {
    config.googleTagManager && (
      <script
        slot="head"
        type="text/javascript"
        data-value={config.googleTagManager}
        set:html={`
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer',document.currentScript.getAttribute('data-value'));
      `}
      />
    )
  }
  {
    config.plausibleAnalytics && domain && (
      <script slot="head" defer data-domain={domain} src="https://plausible.io/js/plausible.js" />
    )
  }
  {
    config.experimentalMath && (
      <link
        slot="head"
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css"
      />
    )
  }

  <!-- TODO: {config.experimentalCodehike && (
    <link slot="head" data-testid="codehike-styles" rel="stylesheet" href={codeHikeStyles} />
  )} -->
  <Theme fallback="#00bcd4" />
</Root>
